/*-----------------------------------------------------*/
/*本程序由Han编写，用于ESP8266的图形GUI*/
/*系统名称：HanOS*/
/*建议配合ESP8266 Expansion By Han拓展板v2.0+使用*/
/*仅供学习参考*/
/*-----------------------------------------------------*/

#include <SPI.h>
#include <Wire.h>
#include <Adafruit_GFX.h>
#include <Adafruit_SSD1306.h>
#include <ESP8266WiFi.h>
#include <WiFiUdp.h>
#include <NTPClient.h>
#include <ESP8266HTTPClient.h>
#include <EEPROM.h>

#define VERSION "v1.21"	/*系统版本*/

/*按键引脚定义*/
#define YES_KEY D6
#define UP_KEY D5
#define DOWN_KEY D7

/*按键标志定义*/
#define YES_KEY_DOWN digitalRead(YES_KEY) == 1
#define UP_KEY_DOWN digitalRead(UP_KEY) == 1
#define DOWN_KEY_DOWN digitalRead(DOWN_KEY) == 1

#define GET_DATE_URL "http://api.seniverse.com/v3/weather/now.json?key=SD3_n8JmylHc9EUyq&location=baoding"

const char* ssid = "------";		/*WiFi SSID*/
const char* password = "------";		/*WiFi Password*/

HTTPClient http;

WiFiUDP ntpUDP;
NTPClient timeClient(ntpUDP, "ntp1.aliyun.com", 60 * 60 * 8, 30 * 60 * 1000);

String years = "-";
String months = "-";
String days = "-";
String temp = "-";

bool yes = false;	//确定键标志
bool up = false;	//向上键标志
bool down = false;	//向下键标志
bool hold = false;	//长按确定键标志

bool isDown_yes = false;
bool isDown_up = false;
bool isDown_down = false;
bool isDown_hold = false;

int sTime = 0, pro = 0;

/*display OLED 定义*/
Adafruit_SSD1306 display = Adafruit_SSD1306(128, 64, &Wire);

/*User Init*/
bool tIsShow = false;	//当前下拉标题显示标志
int desktop_time = 0;   //桌面时间标志
int desktop_mode = 3;
int title_y = -5;		//当前下拉标题y轴坐标

String menu_mode = "desktop_OSLogo";		//显示模式 （1：桌面，2：主菜单，3：子菜单，4：WiFi时钟）
int menu_num = 1;		//主菜单中选中的列表数字
int menu_line = 1;

int an_switch_y = 1 * menu_num * 14;	//选中框当前y轴
int switch_y = an_switch_y;


int addr_desktop_mode = 0;

/*----------------------列表文字显示----------------------*/

String main_label[4] = {
	"Function",
	"WiFi Tool",
	"Debug",
	"System Sitting"
};

String Function_label[4] = {
	"Timer",
	"Desktop Sitting",
	"Flappy Bird",
	"Greedy Snake"
};

String WiFiTool_label[4] = {
	"WiFi Clock",
	"WiFi Server",
	"WiFi Killer",
	"WiFi Fishing"
};

String Debug_label[4] = {
	"Serial Test",
	"LED Test",
	"WiFi Test",
	"OLED Test"
};

String SystemSitting_label[4] = {
	"Reset",
	"System Info",
	"About",
	"Shutdown"
};

String SystemInfo_label[4] = {
	"System:Han OS",
	"Version:" + String(VERSION),
	"Base:ESP8266",
	"ESP-E v2.0+"
};

/*-------------------------------------------------------*/

int text_x_l[4] = { 10, 10, 10, 10 };	//4列列表x轴坐标

/*Logo bitmap定义*/
const unsigned char HAN_LOGO[] PROGMEM = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x0F,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x0F,0x80,0x00,0x00,0x78,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x1F,0xC0,0x00,0x00,0xF8,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x3F,0xC0,0x00,0x00,0xF0,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x3F,0xC0,0x00,0x01,0xE0,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x7F,0xC0,0x00,0x03,0xE0,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFB,0xE0,0x00,0x03,0xC0,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xF1,0xE0,0x00,0x07,0x80,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x01,0xE1,0xE0,0x00,0x0F,0x80,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x03,0xE1,0xE0,0x00,0x0F,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x03,0xC1,0xE0,0x00,0x1E,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x07,0xC1,0xF0,0x00,0x3E,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x07,0x80,0xF0,0x00,0x3C,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x0F,0x00,0x00,0x00,0x78,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x1F,0x00,0x00,0x00,0x78,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x1E,0x3F,0xFF,0xF8,0xF0,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x3C,0x7F,0xFF,0xF1,0xE0,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x7C,0x7F,0xFF,0xF1,0xE0,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x78,0x00,0x00,0x03,0xC0,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0xF8,0x00,0x00,0x07,0x80,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0xF0,0x00,0x78,0x07,0x80,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x01,0xE0,0x00,0x7C,0x0F,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x03,0xE0,0x00,0x7C,0x1E,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x03,0xC0,0x00,0x3C,0x1E,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x07,0x80,0x00,0x3C,0x3C,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x0F,0x80,0x00,0x3C,0x78,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x0F,0x00,0x00,0x3C,0x78,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x1F,0x00,0x00,0x3E,0xF0,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x1E,0x00,0x00,0x3F,0xE0,0x02,0x21,0xC3,0xC0,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x3C,0x00,0x00,0x1F,0xE0,0x02,0x22,0x22,0x20,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x7C,0x00,0x00,0x1F,0xC0,0x03,0xE0,0x22,0x20,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x78,0x00,0x00,0x1F,0x80,0x02,0x21,0xE2,0x20,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0xF0,0x00,0x00,0x1F,0x80,0x02,0x22,0x22,0x20,0x00,0x00,
0x00,0x00,0x00,0x00,0x01,0xF0,0x00,0x00,0x1F,0x00,0x02,0x21,0xE2,0x20,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };

const unsigned char HanOS_Logo[] PROGMEM = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x3F,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x60,0x01,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0xC0,0x00,0xC0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x80,0x00,0x40,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x88,0x00,0x40,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x84,0x00,0x40,0x08,0x00,0x80,0x00,0x00,0x00,0x00,0x3F,0x00,0x0F,0xE0,0x00,
0x00,0x82,0x00,0x40,0x08,0x00,0x80,0x00,0x00,0x00,0x00,0x60,0xC0,0x30,0x00,0x00,
0x00,0x84,0x00,0x40,0x08,0x00,0x80,0x00,0x00,0x00,0x01,0x80,0x20,0x60,0x00,0x00,
0x00,0x88,0xF8,0x40,0x08,0x00,0x80,0x00,0x00,0x00,0x01,0x00,0x10,0x40,0x00,0x00,
0x00,0x80,0x00,0x40,0x08,0x00,0x80,0x00,0x00,0x00,0x02,0x00,0x18,0x40,0x00,0x00,
0x00,0x80,0x00,0x40,0x08,0x00,0x83,0xE0,0x1E,0x00,0x02,0x00,0x08,0x40,0x00,0x00,
0x00,0x80,0xFF,0xFC,0x08,0x00,0x86,0x30,0x61,0x80,0x04,0x00,0x04,0x40,0x00,0x00,
0x00,0x81,0xFF,0xFE,0x0F,0xFE,0x88,0x08,0x40,0xC0,0x04,0x00,0x04,0x30,0x00,0x00,
0x00,0x83,0x80,0xFF,0x08,0x00,0x98,0x0C,0x80,0x40,0x04,0x00,0x04,0x1F,0xC0,0x00,
0x00,0x83,0xFF,0xFF,0x08,0x00,0x90,0x04,0x80,0x40,0x04,0x00,0x04,0x00,0x30,0x00,
0x00,0xC3,0x80,0x07,0x08,0x00,0x90,0x04,0x80,0x40,0x04,0x00,0x04,0x00,0x10,0x00,
0x00,0x63,0x00,0x03,0x08,0x00,0x90,0x04,0x80,0x40,0x02,0x00,0x08,0x00,0x10,0x00,
0x00,0x3E,0x00,0x01,0x08,0x00,0x90,0x04,0x80,0x40,0x03,0x00,0x10,0x00,0x10,0x00,
0x00,0x02,0x00,0x01,0x08,0x00,0x88,0x04,0x80,0x40,0x01,0x00,0x30,0x00,0x10,0x00,
0x00,0x03,0xE0,0x01,0x08,0x00,0x8C,0x04,0x80,0x40,0x00,0xC0,0x60,0x00,0x30,0x00,
0x00,0x02,0x00,0x01,0x08,0x00,0x87,0xF4,0x80,0x40,0x00,0x71,0x80,0x7F,0xC0,0x00,
0x00,0x02,0x00,0x01,0x08,0x00,0x80,0x04,0x80,0x40,0x00,0x0E,0x00,0x00,0x00,0x00,
0x00,0x03,0xF8,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x02,0x00,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x02,0x00,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x03,0xFC,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x03,0x00,0x03,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x01,0x80,0x06,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0xFF,0xFC,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };


void setup() {
	/*OLED初始化*/
	display.begin(SSD1306_SWITCHCAPVCC, 0x3C);
	display.clearDisplay();
	display.display();
	display.setTextSize(1);
	display.setTextColor(SSD1306_WHITE);

	Serial.begin(115200);

	/*WiFi Init*/
	WiFi.mode(WIFI_STA);
	WiFi.begin(ssid, password);
	timeClient.begin();

	http.begin(GET_DATE_URL);
	http.setTimeout(5000);

	/*按键初始化*/
	pinMode(YES_KEY, INPUT);
	pinMode(UP_KEY, INPUT);
	pinMode(DOWN_KEY, INPUT);

	/*OLED开机进度条*/
	start_animation();
	//desktop_mode = EEPROM.read(addr_desktop_mode);
}

void loop() {
	OLED_display();
	timeClient.update();
}

/*--------------------------用户子函数部分--------------------------*/

/*
OLED_display()  OLED显示屏显示主函数
OLED显示程序伪入口
*/
void OLED_display() {
	display.clearDisplay();

	KEY_scan();

	if (yes && tIsShow && menu_mode == "desktop") {
		menu_mode = "main_menu";
		yes = false;
	}

	else if (yes && tIsShow && menu_mode == "desktop_clock") {
		menu_mode = "main_menu";
		yes = false;
	}

	else if (yes && tIsShow && menu_mode == "desktop_OSLogo") {
		menu_mode = "main_menu";
		yes = false;
	}

	else if (hold && menu_mode != "desktop" && menu_mode != "desktop_clock" && menu_mode != "desktop_OSLogo" && menu_mode != "shutdown") {
		if (menu_mode == "main_menu") {
			if (desktop_mode == 1)
				menu_mode = "desktop";
			else if (desktop_mode == 2)
				menu_mode = "desktop_clock";
			else if (desktop_mode == 3)
				menu_mode = "desktop_OSLogo";
		}
		else if (menu_mode == "sub_menu")
			menu_mode = "main_menu";
		else
			menu_mode = "sub_menu";

		hold = false;
		yes = false;
	}

	else if (yes && menu_mode == "sub_menu" && menu_num == 1 && menu_line == 2) {
		menu_mode = "clock";
		get_years();
		yes = false;
	}

	else if (yes && menu_mode == "sub_menu" && menu_num == 1 && menu_line == 4) {
		while (1);
		yes = false;
	}

	else if (yes && menu_mode == "sub_menu" && menu_num == 2 && menu_line == 4) {
		menu_mode = "system_info";
		yes = false;
	}

	else if (yes && menu_mode == "sub_menu" && menu_num == 4 && menu_line == 4) {
		menu_mode = "shutdown";
		yes = false;
	}

	if (menu_mode == "desktop")
		show_desktop();

	else if (menu_mode == "desktop_clock")
		show_desktop_clock();

	else if (menu_mode == "desktop_OSLogo")
		show_desktop_OSlogo();

	else if (menu_mode == "main_menu") {
		if (yes && menu_mode == "main_menu") {
			menu_mode = "sub_menu";
			menu_line = menu_num;
		}
		else {
			show_menu("Main Menu");
			menu_mode = "main_menu";
		}
		yes = false;
	}
	else if (menu_mode == "sub_menu")
		show_menu(main_label[menu_line - 1]);
	else if (menu_mode == "clock") {
		show_clock();
		ctrl_title("Clock", true);
	}

	else if (menu_mode == "system_info")
		show_system_info();

	else if (menu_mode == "shutdown") {
		display.fillScreen(SSD1306_BLACK);
		if (hold)
			while (1);
		yes = false;
		up = false;
		down = false;
		hold = false;
	}

	//Serial.println(menu_mode);
	display.display();
}

/*
show_desktop()  桌面显示函数
*/
void show_desktop() {
	display.drawBitmap(0, 10, HAN_LOGO, 128, 64, SSD1306_WHITE);

	if (yes && menu_mode == "desktop") {
		desktop_time = 0;
		yes = false;
	}
	else
		desktop_time++;

	if (desktop_time >= 150)
		ctrl_title("Desktop", false);
	else
		ctrl_title("Desktop", true);

	if (down && menu_mode == "desktop") {
		desktop_time = 0;
		menu_mode = "desktop_clock";
		desktop_mode = 2;
	}

	up = false;
	down = false;
	yes = false;
}

void show_desktop_clock() {
	show_clock();

	if (yes && menu_mode == "desktop_clock") {
		desktop_time = 0;
		yes = false;
	}

	else
		desktop_time++;

	if (desktop_time >= 150) {
		ctrl_title("Desktop", false);
	}

	else {
		ctrl_title("Desktop", true);
	}

	if (up && menu_mode == "desktop_clock") {
		desktop_time = 0;
		menu_mode = "desktop";
		desktop_mode = 1;
	}

	if (down && menu_mode == "desktop_clock") {
		desktop_time = 0;
		menu_mode = "desktop_OSLogo";
		desktop_mode = 3;
	}

	up = false;
	down = false;
	yes = false;
}

void show_desktop_OSlogo() {
	display.drawBitmap(0, 10, HanOS_Logo, 128, 64, SSD1306_WHITE);

	if (yes && menu_mode == "desktop_OSLogo") {
		desktop_time = 0;
		yes = false;
	}
	else
		desktop_time++;

	if (desktop_time >= 150)
		ctrl_title("Desktop", false);
	else
		ctrl_title("Desktop", true);

	if (up && menu_mode == "desktop_OSLogo") {
		desktop_time = 0;
		menu_mode = "desktop_clock";
		desktop_mode = 2;
	}

	up = false;
	down = false;
	yes = false;
}

void show_menu(String title) {
	display.setTextSize(1);
	display.setCursor(10, 0);
	display.print(title);

	display.drawRect(0, 8, 128, 64 - 8, 1);
	show_menu_label();
	change_page();
}

void show_menu_label() {
	an_switch_y = menu_num * 14;
	int text_target_x = 20;

	display.fillRect(125, switch_y - 6, 15, 14, 1);
	display.fillRect(0, switch_y - 6, 10, 14, 1);

	display.drawLine(0, switch_y - 6, 125, switch_y - 6, 1);
	display.drawLine(0, switch_y + 7, 125, switch_y + 7, 1);
	display.setTextSize(1);

	if (switch_y < an_switch_y)
		switch_y += 2;
	else if (switch_y > an_switch_y)
		switch_y -= 2;

	for (int i = 0; i < 4; i++) {
		int y = (i + 1) * 14;

		display.setTextColor(1);
		display.setTextSize(1);

		if ((i + 1) == menu_num) {
			if (text_x_l[i] < text_target_x)
				text_x_l[i]++;
			else if (text_x_l[i] > text_target_x)
				text_x_l[i]--;
		}

		else {
			if (text_x_l[i] < 10)
				text_x_l[i]++;
			else if (text_x_l[i] > 10)
				text_x_l[i]--;
		}

		display.setCursor(text_x_l[i], y - 2);

		if (menu_mode == "main_menu")
			display.print(main_label[i]);
		else if (menu_mode == "sub_menu") {
			switch (menu_line) {
			case 1:
				display.print(Function_label[i]);
				break;
			case 2:
				display.print(WiFiTool_label[i]);
				break;
			case 3:
				display.print(Debug_label[i]);
				break;
			case 4:
				display.print(SystemSitting_label[i]);
				break;
			}
		}
		else if (menu_mode == "system_info") {
			switch (menu_line) {
			case 1:
				break;
			case 2:
				break;
			case 3:
				break;
			case 4:
				display.print(SystemInfo_label[i]);
				break;
			}
		}
	}
}

void change_page() {
	if (menu_mode != "desktop") {
		if (up) {
			menu_num--;
			up = false;
		}
		else if (down) {
			menu_num++;
			down = false;
		}

		if (menu_num > 4)
			menu_num = 4;

		else if (menu_num < 1)
			menu_num = 1;
	}
}

/*
ctrl_title(String title, bool isShow) 下拉标题函数
title(String):标题内容
isShow(true~false):下拉标题是否隐藏
*/
void ctrl_title(String title, bool isShow) {
	if (isShow && !tIsShow) {
		if (title_y < 13)
			title_y++;
		else if (title_y = 13)
			tIsShow = true;
	}

	else if (!isShow && tIsShow) {
		if (title_y > -5)
			title_y--;
		else if (title_y = -5)
			tIsShow = false;
	}

	display.drawLine(0, title_y, 128, title_y, SSD1306_WHITE);
	display.setTextSize(1);
	display.setCursor(3, title_y - 10);
	display.print(title);
}

/*
KEY_scan() 按键扫描函数
yes(true~false):确定键标志
up(true~false):向上键标志
down(true~false):向下键标志
！需要调用后自行将相应的按键标志复位！
*/
void KEY_scan() {
	/*判断确定键是否按下*/
	if (YES_KEY_DOWN) {
		if (isDown_yes == false) {
			//yes = true;
			isDown_yes = true;
		}

		/*显示长按提示进度条*/
		if (isDown_hold == false) {
			sTime += 5;
			if (sTime >= 3 * 30 && menu_mode != "desktop" && menu_mode != "desktop_clock" && menu_mode != "shutdown") {
				pro += 5;
				if (menu_mode == "clock")
					show_progress(pro, 12);
				else
					show_progress(pro, 7);
			}
			else
				pro = 0;
			//display.display();

			if (sTime >= 128 + 3 * 30) {
				hold = true;
				isDown_hold = true;
				sTime = 0;
				pro = 0;
				isDown_yes = true;
			}
		}
	}

	else {
		if (sTime < 128 + 3 * 30 && isDown_yes == true && isDown_hold == false)
			yes = true;

		sTime = 0;
		pro = 0;
		isDown_yes = false;
		isDown_hold = false;
	}

	/*判断向上键是否按下*/
	if (UP_KEY_DOWN && isDown_up == false) {
		up = true;
		isDown_up = true;
	}

	if (!UP_KEY_DOWN)
		isDown_up = false;

	/*判断向下键是否按下*/
	if (DOWN_KEY_DOWN && isDown_down == false) {
		down = true;
		isDown_down = true;
	}

	if (!DOWN_KEY_DOWN)
		isDown_down = false;
}

/*
start_animation()  开机动画
*/
void start_animation() {
	int pro = 0;

	for (int y = -64; y <= 64; y += 2) {
		display.clearDisplay();

		display.drawBitmap(0, y, HAN_LOGO, 128, 64, SSD1306_WHITE);

		display.setCursor(90, y - 64 + 46);
		display.setTextSize(1);
		display.print(VERSION);

		display.drawBitmap(0, y - 64, HanOS_Logo, 128, 64, SSD1306_WHITE);

		display.display();
	}

	delay(1000);

	while (pro <= 128) {
		display.clearDisplay();
		show_progress(pro, 60);

		display.drawBitmap(0, 0, HanOS_Logo, 128, 64, SSD1306_WHITE);

		display.setCursor(90, 0 + 46);
		display.setTextSize(1);
		display.print(VERSION);

		display.display();
		if (WiFi.status() != WL_CONNECTED)
			pro += 1;
		else
			pro += 2;
	}
	get_years();
}

/*
show_progress()进度条
value(0~128):进度
y(0~64):进度条y轴坐标
*/
void show_progress(int value, int y) {
	display.drawLine(0, y, value, y, SSD1306_WHITE);
}

void get_years() {
	int httpCode = http.GET();
	String str = "";
	if (httpCode > 0) {
		if (httpCode == HTTP_CODE_OK) {
			str = http.getString();
			//Serial.println(str);
			years = str.substring(234, 238);
			months = str.substring(239, 241);
			days = str.substring(242, 244);
			temp = str.substring(214, 216);
		}
	}
	//Serial.println(httpCode);
	http.end();
}

String get_days() {
	//Serial.println(timeClient.getDay());
	switch (timeClient.getDay()) {
	case 0:
		return "Sun";
		break;
	case 1:
		return "Mon";
		break;
	case 2:
		return "Tue";
		break;
	case 3:
		return "Wed";
		break;
	case 4:
		return "Thu";
		break;
	case 5:
		return "Fri";
		break;
	case 6:
		return "Sat";
		break;
	}
}

void show_clock() {
	/*小时显示*/
	display.setTextSize(3);
	display.setCursor(3, 20);
	display.print(timeClient.getFormattedTime().substring(0, 5));

	/*秒显示*/
	display.setTextSize(2);
	display.setCursor(100, 26);
	display.print(timeClient.getFormattedTime().substring(6, 9));

	display.drawLine(0, 50, 128, 50, SSD1306_WHITE);

	/*日期显示*/
	display.setTextSize(1);
	display.setCursor(3, 55);
	display.print(years);
	display.print(".");
	display.print(months);
	display.print(".");
	display.print(days);

	/*星期显示*/
	display.setTextSize(1);
	display.setCursor(72, 55);
	display.print(get_days());

	display.setTextSize(1);
	display.setCursor(95, 55);
	display.print(temp + "deg");
}

void show_system_info() {
	show_menu(SystemSitting_label[2 - 1]);
	//show_menu_label();
}
